name: Enhanced SocialHub Scheduled Tasks v8.0

on:
  # Multiple schedule triggers for different tasks
  schedule:
    # Every 5 minutes for urgent scheduled posts
    - cron: '*/5 * * * *'
    # Every 30 minutes for regular scheduled posts 
    - cron: '*/30 * * * *'
    # Every 2 hours for token refresh checks
    - cron: '0 */2 * * *'
    # Daily at 3 AM UTC for full maintenance
    - cron: '0 3 * * *'
    # Weekly on Sunday at 4 AM UTC for comprehensive cleanup
    - cron: '0 4 * * 0'

  # Manual trigger with input parameters
  workflow_dispatch:
    inputs:
      task_type:
        description: 'Type of task to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - posts_only
        - tokens_only
        - cleanup_only
        - health_check
      log_level:
        description: 'Logging level'
        required: false
        default: 'info'
        type: choice
        options:
        - debug
        - info
        - warn
        - error

  # Trigger on repository events for immediate deployment
  push:
    branches: [ main ]
    paths: 
      - '.github/scripts/**'
      - '.github/workflows/scheduled-tasks-v8.yml'

env:
  NODE_VERSION: '20'
  TIMEZONE: 'UTC'
  MAX_EXECUTION_TIME: 25 # minutes
  RETRY_ATTEMPTS: 3

jobs:
  # Pre-flight checks job
  preflight-checks:
    name: üîç Pre-flight System Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-run: ${{ steps.checks.outputs.should-run }}
      run-type: ${{ steps.checks.outputs.run-type }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate environment and decide execution
        id: checks
        run: |
          echo "üîç Performing pre-flight checks..."
          
          # Check if all required secrets are available
          if [[ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" || -z "${{ secrets.FACEBOOK_APP_ID }}" || -z "${{ secrets.FACEBOOK_APP_SECRET }}" ]]; then
            echo "‚ùå Required secrets missing"
            echo "should-run=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Determine run type based on trigger
          RUN_TYPE="full"
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            CRON_SCHEDULE="${{ github.event.schedule }}"
            case "$CRON_SCHEDULE" in
              "*/5 * * * *")
                RUN_TYPE="urgent_posts"
                ;;
              "*/30 * * * *")
                RUN_TYPE="regular_posts"
                ;;
              "0 */2 * * *")
                RUN_TYPE="tokens_only"
                ;;
              "0 3 * * *")
                RUN_TYPE="full_maintenance"
                ;;
              "0 4 * * 0")
                RUN_TYPE="weekly_cleanup"
                ;;
            esac
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_TYPE="${{ github.event.inputs.task_type }}"
          fi
          
          echo "‚úÖ Pre-flight checks completed"
          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "run-type=$RUN_TYPE" >> $GITHUB_OUTPUT
          echo "üìã Execution type: $RUN_TYPE"

  # Main scheduled tasks execution
  execute-tasks:
    name: üöÄ Execute SocialHub Tasks
    runs-on: ubuntu-latest
    needs: preflight-checks
    if: needs.preflight-checks.outputs.should-run == 'true'
    timeout-minutes: ${{ fromJson(env.MAX_EXECUTION_TIME) }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - run-type: ${{ needs.preflight-checks.outputs.run-type }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Get current and previous commit for change detection

      - name: üü¢ Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package.json'

      - name: üì¶ Install dependencies with security audit
        working-directory: .github/scripts
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci --omit=dev --no-audit
          
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è  Security audit found issues, continuing with caution"
          
          echo "üìã Installed packages:"
          npm list --depth=0

      - name: üîß Setup environment and validation
        run: |
          echo "üîß Configuring environment..."
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "TZ=${{ env.TIMEZONE }}" >> $GITHUB_ENV
          echo "LOG_LEVEL=${{ github.event.inputs.log_level || 'info' }}" >> $GITHUB_ENV
          echo "RUN_TYPE=${{ matrix.run-type }}" >> $GITHUB_ENV
          echo "EXECUTION_ID=gh_${{ github.run_id }}_${{ github.run_attempt }}" >> $GITHUB_ENV
          
          # Create logs directory
          mkdir -p .github/scripts/logs
          
          echo "‚úÖ Environment configured"
          echo "üèÉ Execution ID: gh_${{ github.run_id }}_${{ github.run_attempt }}"
          echo "üìã Run type: ${{ matrix.run-type }}"

      - name: üè• Pre-execution health check
        working-directory: .github/scripts
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
          FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET }}
        run: |
          echo "üè• Performing pre-execution health check..."
          
          # Test Firebase connectivity
          node -e "
            const admin = require('firebase-admin');
            const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
            admin.initializeApp({ credential: admin.credential.cert(serviceAccount) });
            admin.firestore().collection('test').limit(1).get()
              .then(() => console.log('‚úÖ Firebase connectivity verified'))
              .catch(err => { console.error('‚ùå Firebase connectivity failed:', err.message); process.exit(1); });
          "
          
          # Test Facebook API connectivity
          curl -f --silent --max-time 10 "https://graph.facebook.com/v19.0/" > /dev/null && \
            echo "‚úÖ Facebook API connectivity verified" || \
            { echo "‚ùå Facebook API connectivity failed"; exit 1; }
          
          echo "üè• Health check completed successfully"

      - name: üöÄ Execute scheduled tasks with retry mechanism
        working-directory: .github/scripts
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
          FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Starting scheduled tasks execution..."
          echo "üìã Run type: $RUN_TYPE"
          echo "üïê Start time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          ATTEMPT=1
          MAX_ATTEMPTS=${{ env.RETRY_ATTEMPTS }}
          SUCCESS=false
          
          while [[ $ATTEMPT -le $MAX_ATTEMPTS && $SUCCESS == false ]]; do
            echo "üîÑ Attempt $ATTEMPT of $MAX_ATTEMPTS"
            
            if node scheduled-tasks-v8.js --run-type=$RUN_TYPE; then
              echo "‚úÖ Execution successful on attempt $ATTEMPT"
              SUCCESS=true
            else
              EXIT_CODE=$?
              echo "‚ùå Execution failed on attempt $ATTEMPT (exit code: $EXIT_CODE)"
              
              if [[ $ATTEMPT -lt $MAX_ATTEMPTS ]]; then
                DELAY=$((ATTEMPT * 30))
                echo "‚è≥ Waiting ${DELAY}s before retry..."
                sleep $DELAY
              fi
              
              ((ATTEMPT++))
            fi
          done
          
          if [[ $SUCCESS == false ]]; then
            echo "üí• All $MAX_ATTEMPTS attempts failed"
            exit 1
          fi
          
          echo "üèÅ Execution completed successfully"
          echo "üïê End time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

      - name: üìä Collect execution metrics
        if: always()
        working-directory: .github/scripts
        run: |
          echo "üìä Collecting execution metrics..."
          
          # Calculate execution time
          if [[ -f logs/execution-start.time ]]; then
            START_TIME=$(cat logs/execution-start.time 2>/dev/null || echo "0")
            END_TIME=$(date +%s)
            DURATION=$((END_TIME - START_TIME))
            echo "‚è±Ô∏è  Total execution time: ${DURATION}s"
          fi
          
          # Count log entries by level
          if [[ -f logs/scheduler-$(date +%Y-%m-%d).log ]]; then
            echo "üìã Log summary:"
            echo "  INFO entries: $(grep -c '\[INFO\]' logs/scheduler-$(date +%Y-%m-%d).log || echo 0)"
            echo "  WARN entries: $(grep -c '\[WARN\]' logs/scheduler-$(date +%Y-%m-%d).log || echo 0)"
            echo "  ERROR entries: $(grep -c '\[ERROR\]' logs/scheduler-$(date +%Y-%m-%d).log || echo 0)"
          fi
          
          # Disk usage
          echo "üíæ Logs directory size: $(du -sh logs/ | cut -f1)"

      - name: üì§ Upload execution logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scheduler-logs-${{ github.run_id }}-${{ github.run_attempt }}
          path: .github/scripts/logs/
          retention-days: 30
          compression-level: 9

      - name: üì§ Upload execution artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: execution-artifacts-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            .github/scripts/package.json
            .github/scripts/package-lock.json
          retention-days: 7

  # Post-execution monitoring and alerting
  post-execution-monitoring:
    name: üìä Post-Execution Monitoring
    runs-on: ubuntu-latest
    needs: [preflight-checks, execute-tasks]
    if: always() && needs.preflight-checks.outputs.should-run == 'true'
    timeout-minutes: 5

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üü¢ Setup Node.js for monitoring
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '.github/scripts/package.json'

      - name: üìä Generate execution report
        env:
          EXECUTION_STATUS: ${{ needs.execute-tasks.result }}
          RUN_TYPE: ${{ needs.preflight-checks.outputs.run-type }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "üìä Generating execution report..."
          
          cat << EOF > execution-report.json
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "runId": "${{ github.run_id }}",
            "runAttempt": "${{ github.run_attempt }}",
            "runType": "$RUN_TYPE",
            "status": "$EXECUTION_STATUS",
            "trigger": "${{ github.event_name }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "repository": "${{ github.repository }}"
          }
          EOF
          
          echo "üìã Execution Report:"
          cat execution-report.json | jq '.'

      - name: üö® Create GitHub issue on failure
        if: needs.execute-tasks.result == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            const issueBody = `
            ## üö® Scheduled Task Execution Failed
            
            **Execution Details:**
            - **Run ID:** ${{ github.run_id }}
            - **Run Type:** ${{ needs.preflight-checks.outputs.run-type }}
            - **Trigger:** ${{ github.event_name }}
            - **Time:** ${new Date().toISOString()}
            - **Branch:** ${{ github.ref_name }}
            - **Commit:** ${{ github.sha }}
            
            **Failure Information:**
            - **Status:** ${{ needs.execute-tasks.result }}
            - **Logs:** [View Execution Logs](${runUrl})
            
            **Next Steps:**
            1. Check the execution logs for detailed error information
            2. Verify Firebase and API credentials
            3. Check system health status
            4. Manual retry if needed
            
            **Auto-created by:** SocialHub Scheduler v8.0
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Scheduled Task Failure - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['bug', 'scheduler', 'high-priority']
            });

      - name: ‚úÖ Update success status
        if: needs.execute-tasks.result == 'success'
        run: |
          echo "‚úÖ Scheduled tasks completed successfully"
          echo "üìä Run type: ${{ needs.preflight-checks.outputs.run-type }}"
          echo "üïê Completion time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

  # Cleanup and maintenance job (runs weekly)
  cleanup-maintenance:
    name: üßπ Cleanup and Maintenance
    runs-on: ubuntu-latest
    needs: [preflight-checks, execute-tasks]
    if: always() && needs.preflight-checks.outputs.run-type == 'weekly_cleanup'
    timeout-minutes: 10

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üßπ Cleanup old artifacts
        run: |
          echo "üßπ Performing cleanup tasks..."
          
          # Clean up old workflow runs (keep last 50)
          echo "üìã Current workflow runs count:"
          gh api repos/${{ github.repository }}/actions/runs --per-page 1 | jq '.total_count'
          
          # Note: GitHub automatically cleans up old runs, but we can track them
          echo "‚úÖ Cleanup tasks completed"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Generate maintenance report
        run: |
          echo "üìä Generating weekly maintenance report..."
          echo "üóìÔ∏è  Week ending: $(date -u +%Y-%m-%d)"
          echo "üìã Repository: ${{ github.repository }}"
          echo "üîß Scheduler version: v8.0"
          echo "‚úÖ Maintenance completed successfully"