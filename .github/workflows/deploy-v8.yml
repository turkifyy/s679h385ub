name: Enhanced GitHub Pages Deployment v8.0

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
    paths:
      - 'index.html'
      - 'assets/**'
      - 'static/**'
      - 'manifest.json'
      - 'service-worker.js'
      - '.github/workflows/deploy-v8.yml'

  # Trigger on pull requests to main
  pull_request:
    branches: [ main ]
    paths:
      - 'index.html'
      - 'assets/**'
      - 'static/**'
      - 'manifest.json'
      - 'service-worker.js'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - preview
      skip_tests:
        description: 'Skip quality checks'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  DEPLOY_TIMEOUT: 15 # minutes

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

# Ensure only one deployment runs at a time
concurrency:
  group: "pages-deployment"
  cancel-in-progress: true

jobs:
  # Quality checks and validation
  quality-checks:
    name: üîç Quality Checks & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      environment: ${{ steps.config.outputs.environment }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Need previous commit for change detection

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install validation tools
        run: |
          npm install -g html-validate
          npm install -g lighthouse
          npm install -g @axe-core/cli
          sudo apt-get update && sudo apt-get install -y tidy

      - name: üîß Configure deployment environment
        id: config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="preview"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "üåç Deployment environment: $ENVIRONMENT"

      - name: üîç Detect changes and validate deployment
        id: changes
        run: |
          echo "üîç Checking for relevant changes..."
          
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "üöÄ Force deployment requested"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for changes in relevant files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          
          if [[ -n "$CHANGED_FILES" ]]; then
            echo "üìã Changed files:"
            echo "$CHANGED_FILES"
            
            # Check if any relevant files changed
            if echo "$CHANGED_FILES" | grep -E "(\.html$|\.css$|\.js$|\.json$|assets/|static/)"; then
              echo "‚úÖ Relevant changes detected"
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            else
              echo "‚ÑπÔ∏è  No relevant changes detected"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ÑπÔ∏è  No changes detected (initial commit or force push)"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi

      - name: üßπ HTML Validation
        if: steps.changes.outputs.should-deploy == 'true' && github.event.inputs.skip_tests != 'true'
        run: |
          echo "üßπ Validating HTML structure..."
          
          if [[ -f "index.html" ]]; then
            # HTML5 validation
            html-validate index.html
            
            # Check for common issues
            tidy -q -e index.html || true
            
            echo "‚úÖ HTML validation completed"
          else
            echo "‚ö†Ô∏è index.html not found"
          fi

      - name: üîí Security validation
        if: steps.changes.outputs.should-deploy == 'true' && github.event.inputs.skip_tests != 'true'
        run: |
          echo "üîí Performing security validation..."
          
          # Check for sensitive data in HTML
          if grep -i "password\|secret\|key\|token" index.html; then
            echo "‚ö†Ô∏è Potential sensitive data found in HTML"
          fi
          
          # Check for external script sources
          EXTERNAL_SCRIPTS=$(grep -o 'src="http[^"]*"' index.html | grep -v "cdn\.jsdelivr\.net\|unpkg\.com\|cdnjs\.cloudflare\.com" || true)
          if [[ -n "$EXTERNAL_SCRIPTS" ]]; then
            echo "‚ö†Ô∏è External scripts detected:"
            echo "$EXTERNAL_SCRIPTS"
          fi
          
          echo "‚úÖ Security validation completed"

      - name: üì± Progressive Web App validation
        if: steps.changes.outputs.should-deploy == 'true' && github.event.inputs.skip_tests != 'true'
        run: |
          echo "üì± Validating PWA configuration..."
          
          # Check for manifest.json
          if [[ -f "manifest.json" ]]; then
            echo "‚úÖ Web App Manifest found"
            
            # Validate JSON structure
            if jq empty manifest.json 2>/dev/null; then
              echo "‚úÖ Web App Manifest is valid JSON"
            else
              echo "‚ùå Web App Manifest has invalid JSON"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Web App Manifest not found (recommended for PWA)"
          fi
          
          # Check for service worker
          if [[ -f "service-worker.js" ]]; then
            echo "‚úÖ Service Worker found"
          else
            echo "‚ÑπÔ∏è Service Worker not found"
          fi

  # Build and prepare deployment
  build-and-prepare:
    name: üèóÔ∏è Build & Prepare Deployment
    runs-on: ubuntu-latest
    needs: quality-checks
    if: needs.quality-checks.outputs.should-deploy == 'true'
    timeout-minutes: 10
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install build dependencies
        run: |
          npm install -g replace-in-file
          npm install -g html-minifier-terser
          npm install -g clean-css-cli

      - name: üîß Configure environment variables
        env:
          ENVIRONMENT: ${{ needs.quality-checks.outputs.environment }}
        run: |
          echo "üîß Configuring environment for: $ENVIRONMENT"
          
          # Create environment-specific configuration
          cat << EOF > env-config.js
          window.ENV_CONFIG = {
            environment: '$ENVIRONMENT',
            version: '8.0.0',
            buildTime: '$(date -u +%Y-%m-%dT%H:%M:%SZ)',
            commitSha: '${{ github.sha }}',
            apiBaseUrl: '$ENVIRONMENT' === 'production' ? 'https://api.socialhub.app' : 'https://staging-api.socialhub.app',
            enableAnalytics: '$ENVIRONMENT' === 'production',
            enableDebugMode: '$ENVIRONMENT' !== 'production'
          };
          EOF

      - name: üîê Replace API keys and secrets
        env:
          FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
          ENVIRONMENT: ${{ needs.quality-checks.outputs.environment }}
        run: |
          echo "üîê Replacing API keys and configuration..."
          
          # Replace Facebook App ID
          if [[ -n "$FACEBOOK_APP_ID" ]]; then
            replace-in-file "YOUR_FACEBOOK_APP_ID" "$FACEBOOK_APP_ID" index.html --isRegex
            echo "‚úÖ Facebook App ID configured"
          else
            echo "‚ö†Ô∏è Facebook App ID not found in secrets"
          fi
          
          # Replace Google Client ID
          if [[ -n "$GOOGLE_CLIENT_ID" ]]; then
            replace-in-file "YOUR_GOOGLE_CLIENT_ID" "$GOOGLE_CLIENT_ID" index.html --isRegex
            echo "‚úÖ Google Client ID configured"
          else
            echo "‚ö†Ô∏è Google Client ID not found in secrets"
          fi
          
          # Replace Firebase configuration
          if [[ -n "$FIREBASE_CONFIG" ]]; then
            replace-in-file "YOUR_FIREBASE_CONFIG" "$FIREBASE_CONFIG" index.html --isRegex
            echo "‚úÖ Firebase configuration updated"
          else
            echo "‚ö†Ô∏è Firebase configuration not found in secrets"
          fi
          
          echo "üîê API key replacement completed"

      - name: üèóÔ∏è Build and optimize assets
        run: |
          echo "üèóÔ∏è Building and optimizing assets..."
          
          # Create build directory
          mkdir -p build
          
          # Copy main files
          cp index.html build/
          cp env-config.js build/
          
          # Copy additional assets if they exist
          [[ -d "assets" ]] && cp -r assets build/ || echo "No assets directory found"
          [[ -d "static" ]] && cp -r static build/ || echo "No static directory found"
          [[ -f "manifest.json" ]] && cp manifest.json build/ || echo "No manifest.json found"
          [[ -f "service-worker.js" ]] && cp service-worker.js build/ || echo "No service-worker.js found"
          [[ -f "robots.txt" ]] && cp robots.txt build/ || echo "No robots.txt found"
          [[ -f "sitemap.xml" ]] && cp sitemap.xml build/ || echo "No sitemap.xml found"
          
          # Optimize HTML (minify for production only)
          if [[ "${{ needs.quality-checks.outputs.environment }}" == "production" ]]; then
            echo "üóúÔ∏è Minifying HTML for production..."
            html-minifier-terser \
              --collapse-whitespace \
              --remove-comments \
              --remove-optional-tags \
              --remove-redundant-attributes \
              --remove-script-type-attrs \
              --remove-tag-whitespace \
              --use-short-doctype \
              --minify-css true \
              --minify-js true \
              --input-dir build \
              --output-dir build \
              --file-ext html
          fi
          
          # Add cache busting to service worker if it exists
          if [[ -f "build/service-worker.js" ]]; then
            CACHE_VERSION=$(date +%s)
            sed -i "s/CACHE_VERSION = '[^']*'/CACHE_VERSION = 'v$CACHE_VERSION'/g" build/service-worker.js
          fi
          
          echo "üìä Build summary:"
          du -sh build/
          find build/ -type f -name "*.html" -o -name "*.js" -o -name "*.css" | wc -l | xargs echo "Files:"

      - name: üìã Generate deployment metadata
        run: |
          echo "üìã Generating deployment metadata..."
          
          cat << EOF > build/deployment-info.json
          {
            "deploymentId": "${{ github.run_id }}",
            "environment": "${{ needs.quality-checks.outputs.environment }}",
            "version": "8.0.0",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commitSha": "${{ github.sha }}",
            "commitMessage": $(echo '${{ github.event.head_commit.message }}' | jq -R .),
            "actor": "${{ github.actor }}",
            "branch": "${{ github.ref_name }}",
            "repository": "${{ github.repository }}",
            "trigger": "${{ github.event_name }}"
          }
          EOF
          
          echo "‚úÖ Deployment metadata generated"

      - name: üîß Setup Pages
        if: needs.quality-checks.outputs.environment == 'production'
        uses: actions/configure-pages@v4

      - name: üì§ Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'

      - name: üöÄ Deploy to GitHub Pages
        id: deploy
        if: needs.quality-checks.outputs.environment == 'production'
        uses: actions/deploy-pages@v4

  # Post-deployment validation and monitoring
  post-deployment-validation:
    name: üß™ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-prepare]
    if: always() && needs.build-and-prepare.result == 'success'
    timeout-minutes: 10

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js for testing
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install testing tools
        run: |
          npm install -g lighthouse
          npm install -g @axe-core/cli

      - name: ‚è≥ Wait for deployment
        if: needs.quality-checks.outputs.environment == 'production'
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          
          SITE_URL="${{ needs.build-and-prepare.outputs.deployment-url }}"
          echo "üåê Site URL: $SITE_URL"
          
          # Wait for site to be accessible
          for i in {1..10}; do
            if curl -f --silent --max-time 10 "$SITE_URL" > /dev/null; then
              echo "‚úÖ Site is accessible"
              break
            else
              echo "‚è≥ Attempt $i/10: Site not yet accessible, waiting 15s..."
              sleep 15
            fi
          done

      - name: üö¶ Lighthouse performance audit
        if: needs.quality-checks.outputs.environment == 'production'
        run: |
          echo "üö¶ Running Lighthouse performance audit..."
          
          SITE_URL="${{ needs.build-and-prepare.outputs.deployment-url }}"
          
          # Run Lighthouse audit
          lighthouse "$SITE_URL" \
            --chrome-flags="--headless --no-sandbox" \
            --output=json \
            --output-path=lighthouse-report.json \
            --quiet || true
          
          if [[ -f lighthouse-report.json ]]; then
            # Extract key metrics
            PERFORMANCE=$(jq '.categories.performance.score * 100' lighthouse-report.json)
            ACCESSIBILITY=$(jq '.categories.accessibility.score * 100' lighthouse-report.json)
            BEST_PRACTICES=$(jq '.categories["best-practices"].score * 100' lighthouse-report.json)
            SEO=$(jq '.categories.seo.score * 100' lighthouse-report.json)
            
            echo "üìä Lighthouse Scores:"
            echo "  Performance: ${PERFORMANCE}%"
            echo "  Accessibility: ${ACCESSIBILITY}%"
            echo "  Best Practices: ${BEST_PRACTICES}%"
            echo "  SEO: ${SEO}%"
            
            # Check if scores meet minimum thresholds
            if (( $(echo "$PERFORMANCE < 80" | bc -l) )); then
              echo "‚ö†Ô∏è Performance score below threshold (80%)"
            fi
            
            if (( $(echo "$ACCESSIBILITY < 90" | bc -l) )); then
              echo "‚ö†Ô∏è Accessibility score below threshold (90%)"
            fi
          fi

      - name: ‚ôø Accessibility testing
        if: needs.quality-checks.outputs.environment == 'production'
        run: |
          echo "‚ôø Running accessibility tests..."
          
          SITE_URL="${{ needs.build-and-prepare.outputs.deployment-url }}"
          
          # Run axe accessibility tests
          axe "$SITE_URL" \
            --timeout 30000 \
            --exit || true
          
          echo "‚úÖ Accessibility testing completed"

      - name: üîó Functional testing
        if: needs.quality-checks.outputs.environment == 'production'
        run: |
          echo "üîó Running functional tests..."
          
          SITE_URL="${{ needs.build-and-prepare.outputs.deployment-url }}"
          
          # Test that the page loads and contains expected content
          RESPONSE=$(curl -s "$SITE_URL")
          
          if echo "$RESPONSE" | grep -q "SocialHub"; then
            echo "‚úÖ Site contains expected content"
          else
            echo "‚ùå Site does not contain expected content"
            exit 1
          fi
          
          # Test that Firebase is properly configured
          if echo "$RESPONSE" | grep -q "firebase"; then
            echo "‚úÖ Firebase integration detected"
          else
            echo "‚ö†Ô∏è Firebase integration not detected"
          fi

      - name: üìä Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            lighthouse-report.json
          retention-days: 30

  # Notification and reporting
  notify-and-report:
    name: üì¢ Notify & Report
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-prepare, post-deployment-validation]
    if: always() && needs.quality-checks.outputs.should-deploy == 'true'
    timeout-minutes: 5

    steps:
      - name: üìä Generate deployment report
        run: |
          echo "üìä Generating deployment report..."
          
          STATUS="${{ needs.build-and-prepare.result }}"
          ENVIRONMENT="${{ needs.quality-checks.outputs.environment }}"
          VALIDATION_STATUS="${{ needs.post-deployment-validation.result }}"
          
          cat << EOF > deployment-report.md
          # üöÄ Deployment Report
          
          **Status:** $(if [[ "$STATUS" == "success" ]]; then echo "‚úÖ Success"; else echo "‚ùå Failed"; fi)  
          **Environment:** $ENVIRONMENT  
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
          **Commit:** ${{ github.sha }}  
          **Actor:** ${{ github.actor }}  
          **Trigger:** ${{ github.event_name }}  
          
          ## üìã Details
          
          - **Quality Checks:** ‚úÖ Passed
          - **Build & Deploy:** $(if [[ "$STATUS" == "success" ]]; then echo "‚úÖ Success"; else echo "‚ùå Failed"; fi)
          - **Post-Deploy Validation:** $(if [[ "$VALIDATION_STATUS" == "success" ]]; then echo "‚úÖ Passed"; elif [[ "$VALIDATION_STATUS" == "failure" ]]; then echo "‚ùå Failed"; else echo "‚è≥ Skipped"; fi)
          
          EOF
          
          if [[ "$ENVIRONMENT" == "production" && "$STATUS" == "success" ]]; then
            echo "**üåê Live URL:** ${{ needs.build-and-prepare.outputs.deployment-url }}" >> deployment-report.md
          fi
          
          cat deployment-report.md

      - name: üì¢ Create deployment notification
        if: needs.build-and-prepare.result == 'success' && needs.quality-checks.outputs.environment == 'production'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Create a deployment notification as a commit comment
            const deploymentUrl = '${{ needs.build-and-prepare.outputs.deployment-url }}';
            const commitSha = '${{ github.sha }}';
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
              body: `üöÄ **Successfully deployed to production!**
              
              **üìç Live URL:** ${deploymentUrl}
              **üïê Deployed:** ${new Date().toISOString()}
              **üîß Environment:** Production
              
              _Auto-generated by Enhanced Deployment v8.0_`
            });

      - name: üö® Create issue on deployment failure
        if: needs.build-and-prepare.result == 'failure'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Deployment Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## üö® Deployment Failure Report
              
              **Environment:** ${{ needs.quality-checks.outputs.environment }}
              **Commit:** ${{ github.sha }}
              **Actor:** ${{ github.actor }}
              **Trigger:** ${{ github.event_name }}
              **Time:** ${new Date().toISOString()}
              
              **üìã Failure Details:**
              - Build Status: ${{ needs.build-and-prepare.result }}
              - Validation Status: ${{ needs.post-deployment-validation.result }}
              
              **üîó Links:**
              - [View Failed Workflow](${runUrl})
              - [View Logs](${runUrl}/logs)
              
              **üõ†Ô∏è Next Steps:**
              1. Check the workflow logs for detailed error information
              2. Verify all secrets and environment variables are properly configured
              3. Test the deployment locally before retrying
              4. Consider rolling back if this is a production issue
              
              _Auto-generated by Enhanced Deployment v8.0_`,
              labels: ['bug', 'deployment', 'high-priority']
            });

      - name: ‚úÖ Success summary
        if: needs.build-and-prepare.result == 'success'
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìã Summary:"
          echo "  Environment: ${{ needs.quality-checks.outputs.environment }}"
          echo "  Status: Success"
          echo "  Validation: ${{ needs.post-deployment-validation.result }}"
          
          if [[ "${{ needs.quality-checks.outputs.environment }}" == "production" ]]; then
            echo "  Live URL: ${{ needs.build-and-prepare.outputs.deployment-url }}"
          fi